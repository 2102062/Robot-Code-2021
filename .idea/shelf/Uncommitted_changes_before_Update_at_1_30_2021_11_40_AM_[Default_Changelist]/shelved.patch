Index: src/main/java/frc/robot/DashHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/DashHelper.java b/src/main/java/frc/robot/DashHelper.java
new file mode 100644
--- /dev/null	(date 1612028237752)
+++ b/src/main/java/frc/robot/DashHelper.java	(date 1612028237752)
@@ -0,0 +1,99 @@
+package frc.robot;
+
+/*import com.analog.adis16448.frc.ADIS16448_IMU;*/
+import edu.wpi.first.wpilibj.ADXRS450_Gyro;
+import edu.wpi.first.wpilibj.PowerDistributionPanel;
+import edu.wpi.first.wpilibj.Timer;
+import edu.wpi.first.wpilibj.drive.MecanumDrive;
+import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
+import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
+import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
+import edu.wpi.cscore.UsbCamera;
+import edu.wpi.first.cameraserver.CameraServer;
+import edu.wpi.cscore.VideoMode;
+import edu.wpi.cscore.VideoSource;
+import edu.wpi.first.networktables.NetworkTableEntry;
+import edu.wpi.first.wpilibj.util.Color;
+
+public class DashHelper {
+    private ShuffleboardTab mainDash;
+    public static NetworkTableEntry sbSpeedTest;
+    public static NetworkTableEntry sbGyroWidget;
+    public static NetworkTableEntry sbEncoderDistance;
+    public static NetworkTableEntry sbRedValue, sbGreenValue, sbBlueValue;
+    public static NetworkTableEntry sbTimer;
+    public static NetworkTableEntry kP;
+    public static NetworkTableEntry kI;
+    public static NetworkTableEntry kD;
+    public static NetworkTableEntry sbServoOpen;
+    private static DashHelper dash;
+
+    public static DashHelper getInstance() {
+        if (dash == null){
+            dash = new DashHelper();
+            dash.startDash();
+        }
+        return dash;
+    }
+
+    private DashHelper(){
+
+    }
+
+    private void startDash(){
+        mainDash = Shuffleboard.getTab("Main");
+        // Camera
+        UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
+        camera.setVideoMode(VideoMode.PixelFormat.kMJPEG, 800, 600, 20 );
+        camera.setExposureAuto();
+        mainDash.add("Camera", camera);
+
+        //was commented out on original shuffleboard code
+        /*sbSpeedTest = mainDash.add("Speed", Constants.kSpeed).getEntry();
+        sbTimer = mainDash.add("Timer", 0).getEntry();
+        sbEncoderDistance = mainDash.add("Encoder", 0).getEntry();*/
+        /*sbRedValue = mainDash.add("Red Value", 0).getEntry();
+        sbGreenValue = mainDash.add("Green Value", 0).getEntry();
+        sbBlueValue = mainDash.add("Blue Value", 0).getEntry();*/
+
+        //?
+        sbServoOpen = mainDash.add("Servo open", false).getEntry();
+
+        kP = mainDash.add("P", 0.015).getEntry();
+        kI = mainDash.add("I", 0).getEntry();
+        kD = mainDash.add("D", 0).getEntry();
+
+        Shuffleboard.selectTab("Main");
+        Shuffleboard.startRecording();
+
+    }
+    public void setEncoder(double distance){
+        sbEncoderDistance.setDouble(distance);
+    }
+
+    public void setColor(Color color){
+        sbRedValue.setDouble(color.red);
+        sbGreenValue.setDouble(color.green);
+        sbBlueValue.setDouble(color.blue);
+    }
+
+    //errors
+    /*public void setUpGyroWidget(ADIS16448_IMU gyro){
+        mainDash.add("Gyro", gyro).withWidget(BuiltInWidgets.kGyro);
+        System.out.println("Tried to set up gyro");
+    }*/
+
+    //not using mecanum
+    /*public void setUpMechDriveWidget(MecanumDrive mechDrive){
+        mainDash.add("Mecanum Drive", mechDrive).withWidget(BuiltInWidgets.kMecanumDrive);
+    }*/
+    public void setUpPDPWidget(PowerDistributionPanel pdp){
+        mainDash.add("PDP", pdp).withWidget(BuiltInWidgets.kPowerDistributionPanel);
+        System.out.println("Tried to set up pdp widget");
+    }
+
+    public void setTimer(Timer timer){
+        sbTimer.setDouble(timer.get());
+    }
+
+}
